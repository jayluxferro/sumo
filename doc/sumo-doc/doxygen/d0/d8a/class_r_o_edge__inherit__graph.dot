digraph "ROEdge"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{ROEdge\n|# myAmSink\l# myAmSource\l# myApproachingEdges\l# myClassesSuccessorMap\l# myCombinedPermissions\l# myEfforts\l# myFollowingEdges\l# myFromJunction\l# myFunction\l# myIndex\land 10 more...\l# myEdges\l# myHaveEWarned\l# myHaveTTWarned\l# myInterpolate\l|+ getDistanceTo()\l+ getFromJunction()\l+ getLanes()\l+ getPriority()\l+ getToJunction()\l+ ROEdge()\l+ ~ROEdge()\l+ addLane()\l+ addSuccessor()\l+ setFunction()\l+ setSource()\l+ setSink()\l+ setRestrictions()\l+ isInternal()\l+ isCrossing()\l+ isWalkingArea()\l+ isTazConnector()\l+ buildTimeLines()\l+ getFunction()\l+ isSink()\l+ getLength()\l+ getNumericalID()\l+ getSpeedLimit()\l+ getLengthGeometryFactor()\l+ getVClassMaxSpeed()\l+ getNumLanes()\l+ isConnectedTo()\l+ prohibits()\l+ getPermissions()\l+ allFollowersProhibit()\l+ dictSize()\l+ getAllEdges()\l+ setGlobalOptions()\l# getStoredEffort()\l- operator=()\l- ROEdge()\l* addLane()\l* addSuccessor()\l* setFunction()\l* setSource()\l* setSink()\l* setRestrictions()\l* isInternal()\l* isCrossing()\l* isWalkingArea()\l* isTazConnector()\l* buildTimeLines()\l* getFunction()\l* isSink()\l* getLength()\l* getNumericalID()\l* getSpeedLimit()\l* getLengthGeometryFactor()\l* getVClassMaxSpeed()\l* getNumLanes()\l* isConnectedTo()\l* prohibits()\l* getPermissions()\l* allFollowersProhibit()\l* addEffort()\l* addTravelTime()\l* getNumSuccessors()\l* getSuccessors()\l* getSuccessors()\l* getNumPredecessors()\l* getPredecessors()\l* getNormalBefore()\l* getNormalAfter()\l* getEffort()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{Named\n|# myID\l|+ addTo()\l+ getID()\l+ Named()\l+ setID()\l+ ~Named()\l+ getIDSecure()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/dbf/class_named.html",tooltip="Base class for objects which have an id. "];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{AGStreet\n|- myNumWorkplaces\l- myPopulation\l|+ AGStreet()\l+ allows()\l+ getPopulation()\l+ getWorkplaceNumber()\l+ print()\l+ setPopulation()\l+ setWorkplaceNumber()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d9d/class_a_g_street.html",tooltip="A model of the street in the city. "];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{RODFEdge\n|- myFlows\l|+ getFlows()\l+ RODFEdge()\l+ setFlows()\l+ ~RODFEdge()\l- operator=()\l- RODFEdge()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d77/class_r_o_d_f_edge.html"];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{ROJTREdge\n|- myFollowingDefs\l- myParsedTurnings\l|+ addFollowerProbability()\l+ addSuccessor()\l+ chooseNext()\l+ ROJTREdge()\l+ setTurnDefaults()\l+ ~ROJTREdge()\l- operator=()\l- ROJTREdge()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/dc2/class_r_o_j_t_r_edge.html",tooltip="An edge the jtr-router may route through. "];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{ROMAEdge\n|- myFlow\l- myHelpFlow\l- myLeftTurns\l|+ addSuccessor()\l+ getFlow()\l+ getHelpFlow()\l+ ROMAEdge()\l+ setFlow()\l+ setHelpFlow()\l+ ~ROMAEdge()\l- operator=()\l- ROMAEdge()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d46/class_r_o_m_a_edge.html",tooltip="A basic edge for routing applications. "];
}
