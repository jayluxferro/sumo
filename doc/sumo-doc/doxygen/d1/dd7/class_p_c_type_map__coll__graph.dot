digraph "PCTypeMap"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{PCTypeMap\n|# myTypes\l|+ add()\l+ get()\l+ getDefault()\l+ has()\l+ PCTypeMap()\l+ ~PCTypeMap()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #myDefaultType" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{PCTypeMap::TypeDef\n|+ allowFill\l+ discard\l+ id\l+ layer\l+ prefix\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/dff/struct_p_c_type_map_1_1_type_def.html",tooltip="A single definition of values that shall be used for a given type. "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +color" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{RGBColor\n|+ DEFAULT_COLOR_STRING\l+ YELLOW\l- myAlpha\l- myBlue\l- myGreen\l- myRed\l|+ alpha()\l+ blue()\l+ changedBrightness()\l+ green()\l+ invertedColor()\l+ operator!=()\l+ operator==()\l+ red()\l+ RGBColor()\l+ RGBColor()\l+ RGBColor()\l+ set()\l+ ~RGBColor()\l+ fromHSV()\l+ interpolate()\l+ parseColor()\l+ parseColorReporting()\l* YELLOW\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da9/class_r_g_b_color.html"];
  Node3 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +BLACK\n+BLUE\n+RED\n+DEFAULT_COLOR\n+GREY\n+MAGENTA\n+GREEN\n+CYAN\n+ORANGE\n+WHITE\n..." ,arrowhead="odiamond",fontname="Helvetica"];
}
