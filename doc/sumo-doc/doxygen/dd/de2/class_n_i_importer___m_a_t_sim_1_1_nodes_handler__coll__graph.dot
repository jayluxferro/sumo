digraph "NIImporter_MATSim::NodesHandler"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node3 [label="{NIImporter_MATSim::\lNodesHandler\n||+ NodesHandler()\l+ ~NodesHandler()\l# myStartElement()\l- NodesHandler()\l- operator=()\l* myStartElement()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{GenericSAXHandler\n|- myCharactersVector\l- myFileName\l- myParentIndicator\l|+ characters()\l+ endElement()\l+ GenericSAXHandler()\l+ getFileName()\l+ registerParent()\l+ setFileName()\l+ startElement()\l+ ~GenericSAXHandler()\l+ warning()\l+ error()\l+ fatalError()\l# buildErrorMessage()\l# myCharacters()\l# myEndElement()\l# myStartElement()\l- convert()\l- convertTag()\l- GenericSAXHandler()\l- operator=()\l* warning()\l* error()\l* fatalError()\l* AttrMap\l* myPredefinedTags\l* myPredefinedTagsMML\l* TagMap\l* myTagMap\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da8/class_generic_s_a_x_handler.html",tooltip="A handler which converts occuring elements and attributes into enums. "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{XERCES_CPP_NAMESPACE\l::DefaultHandler\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node4 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -myParentHandler" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -myNodeCont" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{NBNodeCont\n|- myClusters2Join\l- myExtractedNodes\l- myInternalID\l- myJoined\l- myJoinedClusters\l- myJoinExclusions\l- myNodes\l- mySplit\l|+ analyzeCluster()\l+ clear()\l+ computeLanes2Lanes()\l+ computeLogics()\l+ computeNodeShapes()\l+ discardTrafficLights()\l+ getAllNames()\l+ getFreeID()\l+ getJoinedClusters()\l+ markAsSplit()\land 7 more...\l+ insert()\l+ insert()\l+ erase()\l+ extract()\l+ retrieve()\l+ retrieve()\l+ begin()\l+ end()\l+ addJoinExclusion()\l+ addCluster2Join()\l+ joinLoadedClusters()\l+ joinJunctions()\l+ removeSelfLoops()\l+ joinSimilarEdges()\l+ avoidOverlap()\l+ removeIsolatedRoads()\l+ removeComponents()\l+ removeUnwishedNodes()\l+ guessTLs()\l+ joinTLS()\l+ setAsTLControlled()\l- NBNodeCont()\l- operator=()\l- generateNodeClusters()\l- joinNodeClusters()\l- shouldBeTLSControlled()\l* insert()\l* insert()\l* erase()\l* extract()\l* retrieve()\l* retrieve()\l* begin()\l* end()\l* addJoinExclusion()\l* addCluster2Join()\l* joinLoadedClusters()\l* joinJunctions()\l* removeSelfLoops()\l* joinSimilarEdges()\l* avoidOverlap()\l* removeIsolatedRoads()\l* removeComponents()\l* removeUnwishedNodes()\l* guessTLs()\l* joinTLS()\l* setAsTLControlled()\l* generateNodeClusters()\l* joinNodeClusters()\l* shouldBeTLSControlled()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d8c/class_n_b_node_cont.html",tooltip="Container for nodes during the netbuilding process. "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -myRTree" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{NamedRTree\n||+ Insert()\l+ NamedRTree()\l+ Remove()\l+ RemoveAll()\l+ Search()\l+ ~NamedRTree()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/dbf/class_named_r_tree.html",tooltip="A RT-tree for efficient storing of SUMO&#39;s Named objects. "];
  Node8 -> Node7 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{NAMED_RTREE_QUAL\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
