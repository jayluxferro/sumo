digraph "IntermodalRouter&lt; E, L, N, V, INTERNALROUTER &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{IntermodalRouter\< E,\l L, N, V, INTERNALROUTER \>\n|- myAccessSplits\l- myAmClone\l- myCallback\l- myCarLookup\l- myCarWalkTransfer\l- myIntermodalNet\l- myInternalRouter\l- myNumericalID\l- myPTLines\l- myStopConnections\l|+ addAccess()\l+ addSchedule()\l+ clone()\l+ compute()\l+ compute()\l+ hasNet()\l+ IntermodalRouter()\l+ prohibit()\l+ recomputeCosts()\l+ writeNetwork()\l+ writeWeights()\l+ ~IntermodalRouter()\l- addCarEdges()\l- createNet()\l- getCarEdge()\l- IntermodalRouter()\l- operator=()\l- splitEdge()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{SUMOAbstractRouter\l\< E, IntermodalTrip\l\< E, N, V \> \>\n|# myBulkMode\l# myOperation\l- myNumQueries\l- myQueryStartTime\l- myQueryTimeSum\l- myQueryVisits\l- myType\l|+ clone()\l+ compute()\l+ endQuery()\l+ getEffort()\l+ recomputeCosts()\l+ setBulkMode()\l+ startQuery()\l+ SUMOAbstractRouter()\l+ ~SUMOAbstractRouter()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d23/class_s_u_m_o_abstract_router.html"];
}
