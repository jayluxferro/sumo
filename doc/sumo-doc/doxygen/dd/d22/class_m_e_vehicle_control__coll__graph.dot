digraph "MEVehicleControl"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node3 [label="{MEVehicleControl\n||+ MEVehicleControl()\l+ ~MEVehicleControl()\l+ buildVehicle()\l- MEVehicleControl()\l- operator=()\l* buildVehicle()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{MSVehicleControl\n|- myTotalDepartureDelay\l- myTotalTravelTime\l|+ abortWaiting()\l+ adaptIntermodalRouter()\l+ addWaiting()\l+ computeRandomDepartOffset()\l+ discountStateLoaded()\l+ getMaxSpeedFactor()\l+ getMinDeceleration()\l+ getWaitingVehicle()\l+ MSVehicleControl()\l+ registerCollision()\land 8 more...\l+ buildVehicle()\l+ addVehicle()\l+ getVehicle()\l+ deleteVehicle()\l+ scheduleVehicleRemoval()\l+ loadedVehBegin()\l+ loadedVehEnd()\l+ vehicleDeparted()\l+ getLoadedVehicleNo()\l+ getEndedVehicleNo()\l+ getRunningVehicleNo()\l+ getDepartedVehicleNo()\l+ getQuota()\l+ getActiveVehicleCount()\l+ getCollisionCount()\l+ getTeleportsJam()\l+ getTeleportsYield()\l+ getTeleportsWrongLane()\l+ getTeleportCount()\l+ getEmergencyStops()\l+ getTotalDepartureDelay()\l+ getTotalTravelTime()\l+ addVType()\l+ removeVType()\l+ addVTypeDistribution()\l+ hasVType()\l+ hasVTypeDistribution()\l+ getVType()\l+ insertVTypeIDs()\l+ setState()\l+ saveState()\l- checkVType()\l* VehicleDictType\l* myVehicleDict\l* VTypeDictType\l* VTypeDistDictType\l* myVTypeDict\l* myVTypeDistDict\l* myDefaultVTypeMayBeDeleted\l* myDefaultPedTypeMayBeDeleted\l* myWaiting\l* myWaitingForPerson\l* myWaitingForContainer\l* myScale\land 6 more...\l* myLoadedVehNo\l* myRunningVehNo\l* myEndedVehNo\l* myDiscarded\l* myCollisions\l* myTeleportsJam\l* myTeleportsYield\l* myTeleportsWrongLane\l* myEmergencyStops\l* myTotalDepartureDelay\l* myTotalTravelTime\l* buildVehicle()\l* addVehicle()\l* getVehicle()\l* deleteVehicle()\l* scheduleVehicleRemoval()\l* loadedVehBegin()\l* loadedVehEnd()\l* vehicleDeparted()\l* getLoadedVehicleNo()\l* getEndedVehicleNo()\l* getRunningVehicleNo()\l* getDepartedVehicleNo()\l* getQuota()\l* getActiveVehicleCount()\l* getCollisionCount()\l* getTeleportsJam()\l* getTeleportsYield()\l* getTeleportsWrongLane()\l* getTeleportCount()\l* getEmergencyStops()\l* getTotalDepartureDelay()\l* getTotalTravelTime()\l* addVType()\l* removeVType()\l* addVTypeDistribution()\l* hasVType()\l* hasVTypeDistribution()\l* getVType()\l* insertVTypeIDs()\l* setState()\l* saveState()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d2f/class_m_s_vehicle_control.html",tooltip="The class responsible for building and deletion of vehicles. "];
}
