digraph "NBNode"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{NBNode\n|+ BACKWARD\l+ FORWARD\l+ UNSPECIFIED_RADIUS\l- myAllEdges\l- myBlockedConnections\l- myCrossings\l- myCrossingsLoadedFromSumoNet\l- myDiscardAllCrossings\l- myDisplacementError\l- myDistrict\l- myHaveCustomPoly\l- myIncomingEdges\l- myKeepClear\land 9 more...\l|+ addCrossing()\l+ addIncomingEdge()\l+ addOutgoingEdge()\l+ addSortedLinkFoes()\l+ addWalkingAreaShape()\l+ avoidOverlap()\l+ buildCrossings()\l+ buildCrossingsAndWalking\lAreas()\l+ buildInnerEdges()\l+ buildWalkingAreas()\land 65 more...\l+ getPosition()\l+ getCenter()\l+ getIncomingEdges()\l+ getOutgoingEdges()\l+ getEdges()\l+ getType()\l+ getRadius()\l+ getKeepClear()\l+ addTrafficLight()\l+ removeTrafficLight()\l+ removeTrafficLights()\l+ isTLControlled()\l+ getControllingTLS()\l+ invalidateTLS()\l+ shiftTLConnectionLaneIndex()\l+ removeSelfLoops()\l+ reshiftPosition()\l+ mirrorX()\l+ bezierControlPoints()\l+ getNodeIDFromInternalLane()\l+ isTrafficLight()\l+ rightTurnConflict()\l- forbidsPedestriansAfter()\l- getEdgesSortedByAngleAtNode\lCenter()\l- getEdgesThatApproach()\l- NBNode()\l- operator=()\l- remapRemoved()\l- removeJoinedTrafficLights()\l- replaceInConnectionProhibitions()\l- setPriorityJunctionPriorities()\l- isLongEnough()\l* getPosition()\l* getCenter()\l* getIncomingEdges()\l* getOutgoingEdges()\l* getEdges()\l* getType()\l* getRadius()\l* getKeepClear()\l* addTrafficLight()\l* removeTrafficLight()\l* removeTrafficLights()\l* isTLControlled()\l* getControllingTLS()\l* invalidateTLS()\l* shiftTLConnectionLaneIndex()\l* removeSelfLoops()\l* reshiftPosition()\l* mirrorX()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{Named\n|# myID\l|+ addTo()\l+ getID()\l+ Named()\l+ setID()\l+ ~Named()\l+ getIDSecure()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/dbf/class_named.html",tooltip="Base class for objects which have an id. "];
  Node2 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Parameterised\n|- myMap\l|+ clearParameter()\l+ getDouble()\l+ getMap()\l+ getParameter()\l+ knowsParameter()\l+ Parameterised()\l+ Parameterised()\l+ setParameter()\l+ unsetParameter()\l+ updateParameter()\l+ writeParams()\l+ ~Parameterised()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/dc7/class_parameterised.html",tooltip="An upper class for objects with additional parameters. "];
}
