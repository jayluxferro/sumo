digraph "MSOffTrafficLightLogic"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{MSOffTrafficLightLogic\n|- myPhaseDefinition\l|+ init()\l+ MSOffTrafficLightLogic()\l+ ~MSOffTrafficLightLogic()\l+ adaptLinkInformationFrom()\l+ trySwitch()\l+ getPhaseNumber()\l+ getPhases()\l+ getPhase()\l+ getLogicType()\l+ getCurrentPhaseIndex()\l+ getCurrentPhaseDef()\l+ getPhaseIndexAtTime()\l+ getOffsetFromIndex()\l+ getIndexFromOffset()\l+ changeStepAndDuration()\l- rebuildPhase()\l* adaptLinkInformationFrom()\l* trySwitch()\l* getPhaseNumber()\l* getPhases()\l* getPhase()\l* getLogicType()\l* getCurrentPhaseIndex()\l* getCurrentPhaseDef()\l* getPhaseIndexAtTime()\l* getOffsetFromIndex()\l* getIndexFromOffset()\l* changeStepAndDuration()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{MSTrafficLightLogic\n|# myCurrentDurationIncrement\l# myDefaultCycleTime\l# myLanes\l# myLinks\l# myOverridingTimes\l# myProgramID\l# mySwitchCommand\l# myEmptyLaneVector\l|+ init()\l+ MSTrafficLightLogic()\l+ ~MSTrafficLightLogic()\l+ addLink()\l+ adaptLinkInformationFrom()\l+ collectLinkStates()\l+ resetLinkStates()\l+ trySwitch()\l+ setTrafficLightSignals()\l+ getProgramID()\l+ getLaneVectors()\l+ getLanesAt()\l+ getLinks()\l+ getLinksAt()\l+ getLinkIndex()\l+ getPhaseNumber()\l+ getPhases()\l+ getPhase()\l+ getLogicType()\l+ getCurrentPhaseIndex()\l+ getCurrentPhaseDef()\l+ getDefaultCycleTime()\l+ getNextSwitchTime()\l+ getSpentDuration()\l+ getPhaseIndexAtTime()\l+ getOffsetFromIndex()\l+ getIndexFromOffset()\l+ addOverridingDuration()\l+ setCurrentDurationIncrement()\l+ changeStepAndDuration()\l- initMesoTLSPenalties()\l- MSTrafficLightLogic()\l- operator=()\l* Phases\l* LinkVector\l* LinkVectorVector\l* LaneVector\l* LaneVectorVector\l* addLink()\l* adaptLinkInformationFrom()\l* collectLinkStates()\l* resetLinkStates()\l* trySwitch()\l* setTrafficLightSignals()\l* getProgramID()\l* getLaneVectors()\l* getLanesAt()\l* getLinks()\l* getLinksAt()\l* getLinkIndex()\l* getPhaseNumber()\l* getPhases()\l* getPhase()\l* getLogicType()\l* getCurrentPhaseIndex()\l* getCurrentPhaseDef()\l* getDefaultCycleTime()\l* getNextSwitchTime()\l* getSpentDuration()\l* getPhaseIndexAtTime()\l* getOffsetFromIndex()\l* getIndexFromOffset()\l* addOverridingDuration()\l* setCurrentDurationIncrement()\l* changeStepAndDuration()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d93/class_m_s_traffic_light_logic.html",tooltip="The parent class for traffic light logics. "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Named\n|# myID\l|+ addTo()\l+ getID()\l+ Named()\l+ setID()\l+ ~Named()\l+ getIDSecure()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/dbf/class_named.html",tooltip="Base class for objects which have an id. "];
  Node3 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Parameterised\n|- myMap\l|+ clearParameter()\l+ getDouble()\l+ getMap()\l+ getParameter()\l+ knowsParameter()\l+ Parameterised()\l+ Parameterised()\l+ setParameter()\l+ unsetParameter()\l+ updateParameter()\l+ writeParams()\l+ ~Parameterised()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/dc7/class_parameterised.html",tooltip="An upper class for objects with additional parameters. "];
}
