digraph "NIImporter_DlrNavteq::NodesHandler"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{NIImporter_DlrNavteq\l::NodesHandler\n|# myGeoms\l|+ NodesHandler()\l+ report()\l+ ~NodesHandler()\l- NodesHandler()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{LineHandler\n||+ LineHandler()\l+ report()\l+ ~LineHandler()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d60/class_line_handler.html",tooltip="Interface definition for a class which retrieves lines from a LineHandler. "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #myNodeCont" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{NBNodeCont\n|- myClusters2Join\l- myExtractedNodes\l- myInternalID\l- myJoined\l- myJoinedClusters\l- myJoinExclusions\l- myNodes\l- mySplit\l|+ analyzeCluster()\l+ clear()\l+ computeLanes2Lanes()\l+ computeLogics()\l+ computeNodeShapes()\l+ discardTrafficLights()\l+ getAllNames()\l+ getFreeID()\l+ getJoinedClusters()\l+ markAsSplit()\land 7 more...\l+ insert()\l+ insert()\l+ erase()\l+ extract()\l+ retrieve()\l+ retrieve()\l+ begin()\l+ end()\l+ addJoinExclusion()\l+ addCluster2Join()\l+ joinLoadedClusters()\l+ joinJunctions()\l+ removeSelfLoops()\l+ joinSimilarEdges()\l+ avoidOverlap()\l+ removeIsolatedRoads()\l+ removeComponents()\l+ removeUnwishedNodes()\l+ guessTLs()\l+ joinTLS()\l+ setAsTLControlled()\l- NBNodeCont()\l- operator=()\l- generateNodeClusters()\l- joinNodeClusters()\l- shouldBeTLSControlled()\l* insert()\l* insert()\l* erase()\l* extract()\l* retrieve()\l* retrieve()\l* begin()\l* end()\l* addJoinExclusion()\l* addCluster2Join()\l* joinLoadedClusters()\l* joinJunctions()\l* removeSelfLoops()\l* joinSimilarEdges()\l* avoidOverlap()\l* removeIsolatedRoads()\l* removeComponents()\l* removeUnwishedNodes()\l* guessTLs()\l* joinTLS()\l* setAsTLControlled()\l* generateNodeClusters()\l* joinNodeClusters()\l* shouldBeTLSControlled()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d8c/class_n_b_node_cont.html",tooltip="Container for nodes during the netbuilding process. "];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -myRTree" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{NamedRTree\n||+ Insert()\l+ NamedRTree()\l+ Remove()\l+ RemoveAll()\l+ Search()\l+ ~NamedRTree()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/dbf/class_named_r_tree.html",tooltip="A RT-tree for efficient storing of SUMO&#39;s Named objects. "];
  Node6 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{NAMED_RTREE_QUAL\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
