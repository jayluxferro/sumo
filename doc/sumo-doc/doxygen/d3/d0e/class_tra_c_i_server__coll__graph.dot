digraph "TraCIServer"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{TraCIServer\n|- myAmEmbedded\l- myCurrentSocket\l- myExecutors\l- myLoadArgs\l- myParameterSizes\l- mySocketReorderRequests\l- mySockets\l- mySubscriptions\l- myTargetTime\l- myVehicleStateChanges\l- myDoCloseConnection\l|+ cleanup()\l+ collectObjectsInRange()\l+ getLoadArgs()\l+ getTargetTime()\l+ getVehicleStateChanges()\l+ isEmbedded()\l+ processCommandsUntilSimStep()\l+ setTargetTime()\l+ vehicleStateChanged()\l+ writeResponseWithLength()\l+ writeStatusCmd()\l+ writeStatusCmd()\l+ writeErrorStatusCmd()\l+ readTypeCheckingInt()\l+ readTypeCheckingDouble()\l+ readTypeCheckingString()\l+ readTypeCheckingStringList()\l+ readTypeCheckingColor()\l+ readTypeCheckingPosition2D()\l+ readTypeCheckingBoundary()\l+ readTypeCheckingByte()\l+ readTypeCheckingUnsignedByte()\l+ readTypeCheckingPolygon()\l+ getInstance()\l+ openSocket()\l+ close()\l+ wasClosed()\l- addObjectVariableSubscription()\l- checkClientOrdering()\l- dispatchCommand()\l- findObjectShape()\l- initialiseSubscription()\l- nextTargetTime()\l- operator=()\l- processReorderingRequests()\l- processSingleSubscription()\l- readCommandID()\land 6 more...\l- commandGetVersion()\l- postProcessSimulationStep()\l* writeStatusCmd()\l* writeStatusCmd()\l* writeErrorStatusCmd()\l* readTypeCheckingInt()\l* readTypeCheckingDouble()\l* readTypeCheckingString()\l* readTypeCheckingStringList()\l* readTypeCheckingColor()\l* readTypeCheckingPosition2D()\l* readTypeCheckingBoundary()\l* readTypeCheckingByte()\l* readTypeCheckingUnsignedByte()\l* readTypeCheckingPolygon()\l* openSocket()\l* close()\l* wasClosed()\l* commandGetVersion()\l* postProcessSimulationStep()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{MSNet::VehicleStateListener\n||+ vehicleStateChanged()\l+ VehicleStateListener()\l+ ~VehicleStateListener()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dd1/class_m_s_net_1_1_vehicle_state_listener.html",tooltip="Interface for objects listening to vehicle state changes. "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -mySubscriptionCache\n-myOutputStorage\n-myInputStorage" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{tcpip::Storage\n|- bigEndian_\l- iter_\l- store\l|+ begin()\l+ end()\l+ hexDump()\l+ position()\l+ readByte()\l+ readChar()\l+ readDouble()\l+ readFloat()\l+ readInt()\l+ readShort()\land 21 more...\l- checkReadSafe()\l- init()\l- readByEndianess()\l- readCharUnsafe()\l- writeByEndianess()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d0e/classtcpip_1_1_storage.html"];
  Node2 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -myInstance" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -myServerSocket" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{tcpip::Socket\n|# lengthLen\l- blocking_\l- host_\l- port_\l- server_socket_\l- socket_\l- verbose_\l|+ accept()\l+ close()\l+ connect()\l+ has_client_connection()\l+ is_blocking()\l+ port()\l+ receive()\l+ receiveExact()\l+ send()\l+ sendExact()\land 6 more...\l# printBufferOnVerbose()\l# receiveComplete()\l# recvAndCheck()\l- atoaddr()\l- BailOnSocketError()\l- datawaiting()\l- init()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d80/classtcpip_1_1_socket.html"];
}
