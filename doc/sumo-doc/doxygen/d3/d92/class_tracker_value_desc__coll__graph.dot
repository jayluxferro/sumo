digraph "TrackerValueDesc"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{TrackerValueDesc\n|- myAggregatedValues\l- myAggregationInterval\l- myInvalidValue\l- myMax\l- myMin\l- myName\l- myRecordingBegin\l- myTmpLastAggValue\l- myValidNo\l- myValues\l|+ addValue()\l+ getAggregatedValues()\l+ getAggregationSpan()\l+ getColor()\l+ getMax()\l+ getMin()\l+ getName()\l+ getRange()\l+ getRecordingBegin()\l+ getValues()\l+ getYCenter()\l+ setAggregationSpan()\l+ TrackerValueDesc()\l+ unlockValues()\l+ ~TrackerValueDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{ValueRetriever\< double \>\n||+ addValue()\l+ ValueRetriever()\l+ ~ValueRetriever()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/de3/class_value_retriever.html"];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -myLock" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{MFXMutex\n|# lock_\l- mutexHandle\l|+ lock()\l+ locked()\l+ MFXMutex()\l+ unlock()\l+ ~MFXMutex()\l- MFXMutex()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d79/class_m_f_x_mutex.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{AbstractMutex\n||+ AbstractMutex()\l+ lock()\l+ unlock()\l+ ~AbstractMutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d30/class_abstract_mutex.html",tooltip="An abstract class for encapsulating mutex implementations. "];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -myActiveCol\n-myInactiveCol" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{RGBColor\n|+ DEFAULT_COLOR_STRING\l+ YELLOW\l- myAlpha\l- myBlue\l- myGreen\l- myRed\l|+ alpha()\l+ blue()\l+ changedBrightness()\l+ green()\l+ invertedColor()\l+ operator!=()\l+ operator==()\l+ red()\l+ RGBColor()\l+ RGBColor()\l+ RGBColor()\l+ set()\l+ ~RGBColor()\l+ fromHSV()\l+ interpolate()\l+ parseColor()\l+ parseColorReporting()\l* YELLOW\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da9/class_r_g_b_color.html"];
  Node6 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +BLACK\n+BLUE\n+RED\n+DEFAULT_COLOR\n+GREY\n+MAGENTA\n+GREEN\n+CYAN\n+ORANGE\n+WHITE\n..." ,arrowhead="odiamond",fontname="Helvetica"];
}
