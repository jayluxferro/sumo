digraph "SUMOAbstractRouter&lt; E, V &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{SUMOAbstractRouter\l\< E, V \>\n|# myBulkMode\l# myOperation\l- myNumQueries\l- myQueryStartTime\l- myQueryTimeSum\l- myQueryVisits\l- myType\l|+ clone()\l+ compute()\l+ endQuery()\l+ getEffort()\l+ recomputeCosts()\l+ setBulkMode()\l+ startQuery()\l+ SUMOAbstractRouter()\l+ ~SUMOAbstractRouter()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{AStarRouter\< E, V \>\n|# myComparator\l# myEdgeInfos\l# myErrorMsgHandler\l# myFound\l# myFrontierList\l# myLookupTable\l# myMaxSpeed\l|+ AStarRouter()\l+ AStarRouter()\l+ buildPathFrom()\l+ clone()\l+ compute()\l+ init()\l+ recomputeCosts()\l+ ~AStarRouter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/da6/class_a_star_router.html",tooltip="Computes the shortest path through a network using the A* algorithm. "];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{CHRouter\< E, V \>\n|- myBackwardSearch\l- myEdges\l- myErrorMsgHandler\l- myForwardSearch\l- myHierarchy\l- myHierarchyBuilder\l- mySVC\l- myValidUntil\l- myWeightPeriod\l|+ buildContractionHierarchy()\l+ buildPathFromMeeting()\l+ CHRouter()\l+ CHRouter()\l+ clone()\l+ compute()\l+ recomputeCosts()\l+ ~CHRouter()\l- getVia()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d67/class_c_h_router.html",tooltip="Computes the shortest path through a contracted network. "];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{CHRouterWrapper\< E, V \>\n|- myBegin\l- myEdges\l- myEnd\l- myIgnoreErrors\l- myMaxNumInstances\l- myRouters\l- myWeightPeriod\l|+ CHRouterWrapper()\l+ clone()\l+ compute()\l+ recomputeCosts()\l+ ~CHRouterWrapper()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d53/class_c_h_router_wrapper.html",tooltip="Computes the shortest path through a contracted network. "];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{DijkstraRouter\< E, V \>\n|- myComparator\l- myEdgeInfos\l- myErrorMsgHandler\l- myFound\l- myFrontierList\l- myTTOperation\l|+ buildPathFrom()\l+ clone()\l+ compute()\l+ DijkstraRouter()\l+ getEdgeInfo()\l+ getTravelTime()\l+ init()\l+ recomputeCosts()\l+ ~DijkstraRouter()\l- DijkstraRouter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d22/class_dijkstra_router.html",tooltip="Computes the shortest path through a network using the Dijkstra algorithm. "];
}
