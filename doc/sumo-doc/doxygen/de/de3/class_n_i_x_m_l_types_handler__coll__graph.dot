digraph "NIXMLTypesHandler"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node4 [label="{NIXMLTypesHandler\n|- myCurrentTypeID\l|+ NIXMLTypesHandler()\l+ ~NIXMLTypesHandler()\l# myStartElement()\l- NIXMLTypesHandler()\l- operator=()\l* myStartElement()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{SUMOSAXHandler\n||+ SUMOSAXHandler()\l+ ~SUMOSAXHandler()\l- operator=()\l- SUMOSAXHandler()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/db8/class_s_u_m_o_s_a_x_handler.html",tooltip="SAX-handler base for SUMO-files. "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{GenericSAXHandler\n|- myCharactersVector\l- myFileName\l- myParentIndicator\l|+ characters()\l+ endElement()\l+ GenericSAXHandler()\l+ getFileName()\l+ registerParent()\l+ setFileName()\l+ startElement()\l+ ~GenericSAXHandler()\l+ warning()\l+ error()\l+ fatalError()\l# buildErrorMessage()\l# myCharacters()\l# myEndElement()\l# myStartElement()\l- convert()\l- convertTag()\l- GenericSAXHandler()\l- operator=()\l* warning()\l* error()\l* fatalError()\l* AttrMap\l* myPredefinedTags\l* myPredefinedTagsMML\l* TagMap\l* myTagMap\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da8/class_generic_s_a_x_handler.html",tooltip="A handler which converts occuring elements and attributes into enums. "];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{XERCES_CPP_NAMESPACE\l::DefaultHandler\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node6 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -myParentHandler" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -myTypeCont" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{NBTypeCont\n|- myTypes\l|+ addRestriction()\l+ copyRestrictionsAndAttrs()\l+ insert()\l+ knows()\l+ markAsSet()\l+ markAsToDiscard()\l+ NBTypeCont()\l+ setDefaults()\l+ size()\l+ writeTypes()\l+ ~NBTypeCont()\l+ getNumLanes()\l+ getSpeed()\l+ getPriority()\l+ getIsOneWay()\l+ getShallBeDiscarded()\l+ wasSet()\l+ getPermissions()\l+ getWidth()\l+ getSidewalkWidth()\l+ getBikeLaneWidth()\l- getType()\l- NBTypeCont()\l- operator=()\l* getNumLanes()\l* getSpeed()\l* getPriority()\l* getIsOneWay()\l* getShallBeDiscarded()\l* wasSet()\l* getPermissions()\l* getWidth()\l* getSidewalkWidth()\l* getBikeLaneWidth()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d57/class_n_b_type_cont.html",tooltip="A storage for available types of edges. "];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -myDefaultType" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{NBTypeCont::TypeDefinition\n|+ attrs\l+ bikeLaneWidth\l+ discard\l+ numLanes\l+ oneWay\l+ permissions\l+ priority\l+ restrictions\l+ sidewalkWidth\l+ speed\l+ width\l|+ TypeDefinition()\l+ TypeDefinition()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d0e/struct_n_b_type_cont_1_1_type_definition.html"];
}
