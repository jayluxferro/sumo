digraph "RODFDetFlowLoader"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{RODFDetFlowLoader\n|- myEndTime\l- myHaveWarnedAboutOverriding\lBoundaries\l- myHaveWarnedAboutPartialDefs\l- myStartTime\l- myTimeOffset\l- myTimeScale\l|+ read()\l+ RODFDetFlowLoader()\l+ ~RODFDetFlowLoader()\l- operator=()\l- RODFDetFlowLoader()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -myDetectorContainer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{RODFDetectorCon\n|# myDetectorEdgeMap\l# myDetectorMap\l# myDetectors\l|+ addDetector()\l+ detectorsHaveCompleteTypes()\l+ detectorsHaveRoutes()\l+ getAggFlowFor()\l+ getAnyDetectorForEdge()\l+ getDetector()\l+ getDetectors()\l+ getModifiableDetector()\l+ guessEmptyFlows()\l+ knows()\land 13 more...\l# clearDists()\l- operator=()\l- RODFDetectorCon()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d92/class_r_o_d_f_detector_con.html",tooltip="A container for RODFDetectors. "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -myLineHandler" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{NamedColumnsParser\n|- myAmCaseInsensitive\l- myDefinitionsMap\l- myLineDelimiter\l|+ get()\l+ hasFullDefinition()\l+ know()\l+ NamedColumnsParser()\l+ NamedColumnsParser()\l+ parseLine()\l+ reinit()\l+ ~NamedColumnsParser()\l- checkPrune()\l- reinitMap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dc1/class_named_columns_parser.html",tooltip="A parser to retrieve information from a table with known columns. "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -myLineParser" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{StringTokenizer\n|+ NEWLINE\l+ SPACE\l+ TAB\l+ WHITECHARS\l- myLengths\l- myPos\l- myStarts\l- myTosplit\l|+ front()\l+ get()\l+ getVector()\l+ hasNext()\l+ next()\l+ reinit()\l+ size()\l+ StringTokenizer()\l+ StringTokenizer()\l+ StringTokenizer()\l+ StringTokenizer()\l+ ~StringTokenizer()\l- prepare()\l- prepareWhitechar()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dc0/class_string_tokenizer.html"];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -myStorage" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{RODFDetectorFlows\n|# myBeginTime\l# myEndTime\l# myFastAccessFlows\l# myMaxDetectorFlow\l# myStepOffset\l|+ addFlow()\l+ getFlowDefs()\l+ getFlowSumSecure()\l+ getMaxDetectorFlow()\l+ knows()\l+ mesoJoin()\l+ printAbsolute()\l+ removeFlow()\l+ RODFDetectorFlows()\l+ setFlows()\l+ ~RODFDetectorFlows()\l- operator=()\l- RODFDetectorFlows()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d0f/class_r_o_d_f_detector_flows.html",tooltip="A container for flows. "];
}
