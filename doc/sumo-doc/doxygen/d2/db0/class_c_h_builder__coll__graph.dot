digraph "CHBuilder&lt; E, V &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{CHBuilder\< E, V \>\n|- myCHInfos\l- myEdges\l- mySVC\l- myUpdateCount\l|+ buildContractionHierarchy()\l+ CHBuilder()\l+ ~CHBuilder()\l- debugPrintQueue()\l- disconnect()\l- getCHInfo()\l- operator=()\l- synchronize()\l- tryUpdateFront()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -mySPTree" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{SPTree\< CHBuilder::\lCHInfo, CHBuilder::CHConnection \>\n|- myFound\l- myFrontier\l- myMaxDepth\l- myNeededShortcuts\l- myShortcutsToValidate\l- myValidatePermissions\l|+ getNeededShortcuts()\l+ init()\l+ rebuildFrom()\l+ registerForValidation()\l+ SPTree()\l+ validatePermissions()\l- debugPrintVector()\l- dijkstraTT()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d72/class_s_p_tree.html"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -myCmp" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{SPTree\< E, C \>::EdgeByTTComparator\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d5f/class_s_p_tree_1_1_edge_by_t_t_comparator.html"];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -myCmp" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{CHBuilder\< E, V \>::\lCHInfoComparator\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d73/class_c_h_builder_1_1_c_h_info_comparator.html"];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -myErrorMsgHandler" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{MsgHandler\n|- myRetrievers\l- myType\l- myWasInformed\l- myAmProcessingProcess\l|+ addRetriever()\l+ beginProcessMsg()\l+ clear()\l+ endProcessMsg()\l+ inform()\l+ isRetriever()\l+ operator\<\<()\l+ removeRetriever()\l+ wasInformed()\l+ assignLock()\l+ cleanupOnEnd()\l+ getErrorInstance()\l+ getMessageInstance()\l+ getWarningInstance()\l+ initOutputOptions()\l# build()\l- MsgHandler()\l- MsgHandler()\l- operator=()\l- ~MsgHandler()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/df6/class_msg_handler.html"];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -myLock" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{AbstractMutex\n||+ AbstractMutex()\l+ lock()\l+ unlock()\l+ ~AbstractMutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d30/class_abstract_mutex.html",tooltip="An abstract class for encapsulating mutex implementations. "];
  Node5 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -myErrorInstance\n-myWarningInstance\n-myMessageInstance" ,arrowhead="odiamond",fontname="Helvetica"];
}
