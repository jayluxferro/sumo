digraph "NIVissimEdge"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{NIVissimEdge\n|- myAmWithinJunction\l- myClosedLanes\l- myConnectionClusters\l- myDistrictConnections\l- myIncomingConnections\l- myLaneSpeeds\l- myName\l- myNoLanes\l- myOutgoingConnections\l- myPatchedSpeeds\l- myToTreatAsSame\l- myType\l- myZuschlag1\l- myZuschlag2\l- myDict\l- myLanesWithMissingSpeeds\l- myMaxID\l|+ addIncomingConnection()\l+ addOutgoingConnection()\l+ addToConnectionCluster()\l+ addToTreatAsSame()\l+ buildGeom()\l+ checkDistrictConnectionExistanceAt()\l+ getBegin2D()\l+ getBestIncoming()\l+ getBestOutgoing()\l+ getConnectionTo()\land 11 more...\l+ buildConnectionClusters()\l+ dict_buildNBEdges()\l+ dict_checkEdges2Join()\l+ dict_propagateSpeeds()\l+ dictionary()\l+ dictionary()\l+ dictionary()\l+ reportUnsetSpeeds()\l- buildNBEdge()\l- checkUnconnectedLaneSpeeds()\l- getFromNode()\l- getOutgoingConnected()\l- getRealSpeed()\l- getToNode()\l- propagateOwn()\l- propagateSpeed()\l- remapOneOfNodes()\l- resolveSameNode()\l- setDistrictSpeed()\l- getNodeSecure()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{NIVissimAbstractEdge\n|# myDisturbances\l# myID\l# myNode\l- myDict\l|+ addDisturbance()\l+ buildGeom()\l+ crossesEdge()\l+ crossesEdgeAtPoint()\l+ getDisturbances()\l+ getGeometry()\l+ getGeomPosition()\l+ getID()\l+ hasNodeCluster()\l+ NIVissimAbstractEdge()\l+ overlapsWith()\l+ setNodeCluster()\l+ splitAssigning()\l+ ~NIVissimAbstractEdge()\l+ clearDict()\l+ dictionary()\l+ dictionary()\l+ getWithin()\l+ splitAndAssignToNodes()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d14/class_n_i_vissim_abstract_edge.html"];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" #myGeom" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{PositionVector\n||+ add()\l+ add()\l+ angleAt2D()\l+ append()\l+ area()\l+ around()\l+ beginEndAngle()\l+ closePolygon()\l+ crosses()\l+ distance2D()\land 65 more...\l+ positionAtOffset()\l+ positionAtOffset2D()\l+ sideOffset()\l- intersects()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d56/class_position_vector.html",tooltip="A list of positions. "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{AbstractPoly\n||+ AbstractPoly()\l+ AbstractPoly()\l+ around()\l+ crosses()\l+ overlapsWith()\l+ partialWithin()\l+ ~AbstractPoly()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d1a/class_abstract_poly.html"];
  Node6 -> Node4 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{std::vector\< Position \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node4 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +EMPTY" ,arrowhead="odiamond",fontname="Helvetica"];
}
