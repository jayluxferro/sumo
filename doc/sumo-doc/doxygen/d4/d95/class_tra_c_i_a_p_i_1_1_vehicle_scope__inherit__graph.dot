digraph "TraCIAPI::VehicleScope"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{TraCIAPI::VehicleScope\n|- LAST_TRAVEL_TIME_UPDATE\l|+ VehicleScope()\l+ ~VehicleScope()\l+ getIDList()\l+ getIDCount()\l+ getSpeed()\l+ getPosition()\l+ getPosition3D()\l+ getAngle()\l+ getRoadID()\l+ getLaneID()\l+ getLaneIndex()\l+ getTypeID()\land 32 more...\l+ getLength()\l+ getMaxSpeed()\l+ getAccel()\l+ getDecel()\l+ getEmergencyDecel()\l+ getApparentDecel()\l+ getTau()\l+ getImperfection()\l+ getSpeedDeviation()\l+ getMinGap()\land 8 more...\l+ add()\l+ changeTarget()\l+ setRouteID()\l+ setRoute()\l+ rerouteTraveltime()\l+ moveTo()\l+ moveToXY()\l+ slowDown()\l+ setSpeed()\l+ setType()\l+ remove()\l+ setColor()\l+ setLine()\l+ setVia()\l+ setShapeClass()\l+ setEmissionClass()\l+ setMaxSpeed()\l- operator=()\l- VehicleScope()\l* getIDList()\l* getIDCount()\l* getSpeed()\l* getPosition()\l* getPosition3D()\l* getAngle()\l* getRoadID()\l* getLaneID()\l* getLaneIndex()\l* getTypeID()\land 32 more...\l* getLength()\l* getMaxSpeed()\l* getAccel()\l* getDecel()\l* getEmergencyDecel()\l* getApparentDecel()\l* getTau()\l* getImperfection()\l* getSpeedDeviation()\l* getMinGap()\land 8 more...\l* add()\l* changeTarget()\l* setRouteID()\l* setRoute()\l* rerouteTraveltime()\l* moveTo()\l* moveToXY()\l* slowDown()\l* setSpeed()\l* setType()\l* remove()\l* setColor()\l* setLine()\l* setVia()\l* setShapeClass()\l* setEmissionClass()\l* setMaxSpeed()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{TraCIAPI::TraCIScopeWrapper\n|# myParent\l|+ TraCIScopeWrapper()\l+ ~TraCIScopeWrapper()\l- operator=()\l- TraCIScopeWrapper()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/da7/class_tra_c_i_a_p_i_1_1_tra_c_i_scope_wrapper.html",tooltip="An abstract interface for accessing type-dependent values. "];
}
