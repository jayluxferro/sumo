digraph "MSCalibrator::AspiredState"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MSCalibrator::AspiredState\n|+ begin\l+ end\l+ q\l+ v\l|+ AspiredState()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +vehicleParameter" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{SUMOVehicleParameter\n|+ containerNumber\l+ fromTaz\l+ id\l+ line\l+ parametersSet\l+ personNumber\l+ routeid\l+ stops\l+ toTaz\l+ via\l+ vtypeid\l+ depart\l+ departProcedure\l+ departLane\l+ departLaneProcedure\l+ departPos\l+ departPosProcedure\l+ departPosLat\l+ departPosLatProcedure\l+ departSpeed\l+ departSpeedProcedure\l+ arrivalLane\l+ arrivalLaneProcedure\l+ arrivalPos\l+ arrivalPosProcedure\l+ arrivalPosLat\l+ arrivalPosLatProcedure\l+ arrivalSpeed\l+ arrivalSpeedProcedure\l+ repetitionNumber\l+ repetitionsDone\l+ repetitionOffset\l+ repetitionProbability\l+ repetitionEnd\l|+ defaultOptionOverrides()\l+ SUMOVehicleParameter()\l+ wasSet()\l+ write()\l+ ~SUMOVehicleParameter()\l+ interpretEdgePos()\l+ parseDepart()\l+ parseDepartLane()\l+ parseDepartPos()\l+ parseDepartPosLat()\l+ parseDepartSpeed()\l+ parseArrivalLane()\l+ parseArrivalPos()\l+ parseArrivalPosLat()\l+ parseArrivalSpeed()\l* depart\l* departProcedure\l* departLane\l* departLaneProcedure\l* departPos\l* departPosProcedure\l* departPosLat\l* departPosLatProcedure\l* departSpeed\l* departSpeedProcedure\l* arrivalLane\l* arrivalLaneProcedure\l* arrivalPos\l* arrivalPosProcedure\l* arrivalPosLat\l* arrivalPosLatProcedure\l* arrivalSpeed\l* arrivalSpeedProcedure\l* repetitionNumber\l* repetitionsDone\l* repetitionOffset\l* repetitionProbability\l* repetitionEnd\l* parseDepart()\l* parseDepartLane()\l* parseDepartPos()\l* parseDepartPosLat()\l* parseDepartSpeed()\l* parseArrivalLane()\l* parseArrivalPos()\l* parseArrivalPosLat()\l* parseArrivalSpeed()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d51/class_s_u_m_o_vehicle_parameter.html",tooltip="Structure representing possible vehicle parameter. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Parameterised\n|- myMap\l|+ clearParameter()\l+ getDouble()\l+ getMap()\l+ getParameter()\l+ knowsParameter()\l+ Parameterised()\l+ Parameterised()\l+ setParameter()\l+ unsetParameter()\l+ updateParameter()\l+ writeParams()\l+ ~Parameterised()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/dc7/class_parameterised.html",tooltip="An upper class for objects with additional parameters. "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +color" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{RGBColor\n|+ DEFAULT_COLOR_STRING\l+ YELLOW\l- myAlpha\l- myBlue\l- myGreen\l- myRed\l|+ alpha()\l+ blue()\l+ changedBrightness()\l+ green()\l+ invertedColor()\l+ operator!=()\l+ operator==()\l+ red()\l+ RGBColor()\l+ RGBColor()\l+ RGBColor()\l+ set()\l+ ~RGBColor()\l+ fromHSV()\l+ interpolate()\l+ parseColor()\l+ parseColorReporting()\l* YELLOW\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da9/class_r_g_b_color.html"];
  Node4 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +BLACK\n+BLUE\n+RED\n+DEFAULT_COLOR\n+GREY\n+MAGENTA\n+GREEN\n+CYAN\n+ORANGE\n+WHITE\n..." ,arrowhead="odiamond",fontname="Helvetica"];
}
